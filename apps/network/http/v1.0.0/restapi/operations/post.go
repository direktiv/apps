// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostHandlerFunc turns a function with the right signature into a post handler
type PostHandlerFunc func(PostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostHandlerFunc) Handle(params PostParams) middleware.Responder {
	return fn(params)
}

// PostHandler interface for that can handle valid post params
type PostHandler interface {
	Handle(PostParams) middleware.Responder
}

// NewPost creates a new http.Handler for the post operation
func NewPost(ctx *middleware.Context, handler PostHandler) *Post {
	return &Post{Context: ctx, Handler: handler}
}

/* Post swagger:route POST / post

Post post API

*/
type Post struct {
	Context *middleware.Context
	Handler PostHandler
}

func (o *Post) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostBody post body
//
// swagger:model PostBody
type PostBody struct {

	// body
	Body *PostParamsBodyBody `json:"body,omitempty"`

	// If set to `true` responses with status above 299 will be treated as errors.
	// Example: true
	Error200 bool `json:"error200,omitempty"`

	// List of key/values send as headers with the request.
	// Example: {"myheader":"value"}
	Headers map[string]string `json:"headers,omitempty"`

	// Skips the verification the server certificate chain and host name.
	// Example: true
	Insecure bool `json:"insecure,omitempty"`

	// HTTP method. Defaults to GET.
	// Example: POST
	// Enum: [GET HEAD POST PUT DELETE OPTIONS CONNECT TRACE PATCH]
	Method string `json:"method,omitempty"`

	// List of key/values appended to URL as query parameters.
	// Example: {"query1":"queryvalue"}
	Params map[string]string `json:"params,omitempty"`

	// If username and password are set, it will be used for basic authenitcation for the request.
	// This should be passed in as Direktiv secret.
	// Example: mypassword
	Password string `json:"password,omitempty"`

	// URL for the request.
	// Example: http://www.direktiv.io
	// Required: true
	URL *string `json:"url"`

	// If username and password are set, it will be used for basic authenitcation for the request.
	// Example: myuser
	Username string `json:"username,omitempty"`
}

// Validate validates this post body
func (o *PostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBody) validateBody(formats strfmt.Registry) error {
	if swag.IsZero(o.Body) { // not required
		return nil
	}

	if o.Body != nil {
		if err := o.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "body")
			}
			return err
		}
	}

	return nil
}

var postBodyTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","HEAD","POST","PUT","DELETE","OPTIONS","CONNECT","TRACE","PATCH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postBodyTypeMethodPropEnum = append(postBodyTypeMethodPropEnum, v)
	}
}

const (

	// PostBodyMethodGET captures enum value "GET"
	PostBodyMethodGET string = "GET"

	// PostBodyMethodHEAD captures enum value "HEAD"
	PostBodyMethodHEAD string = "HEAD"

	// PostBodyMethodPOST captures enum value "POST"
	PostBodyMethodPOST string = "POST"

	// PostBodyMethodPUT captures enum value "PUT"
	PostBodyMethodPUT string = "PUT"

	// PostBodyMethodDELETE captures enum value "DELETE"
	PostBodyMethodDELETE string = "DELETE"

	// PostBodyMethodOPTIONS captures enum value "OPTIONS"
	PostBodyMethodOPTIONS string = "OPTIONS"

	// PostBodyMethodCONNECT captures enum value "CONNECT"
	PostBodyMethodCONNECT string = "CONNECT"

	// PostBodyMethodTRACE captures enum value "TRACE"
	PostBodyMethodTRACE string = "TRACE"

	// PostBodyMethodPATCH captures enum value "PATCH"
	PostBodyMethodPATCH string = "PATCH"
)

// prop value enum
func (o *PostBody) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postBodyTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostBody) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.Method) { // not required
		return nil
	}

	// value enum
	if err := o.validateMethodEnum("body"+"."+"method", "body", o.Method); err != nil {
		return err
	}

	return nil
}

func (o *PostBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post body based on the context it is used
func (o *PostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBody(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBody) contextValidateBody(ctx context.Context, formats strfmt.Registry) error {

	if o.Body != nil {
		if err := o.Body.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "body")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBody) UnmarshalBinary(b []byte) error {
	var res PostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostParamsBodyBody Defines the payload of the request. The `kind` value can have three different values:
// - string: Plain string payload, e.g. JSON
// - base64: Will be "converted" to binary and attached
// - file: File payload
// Example: {"kind":"string","value":"This is the payload"}
//
// swagger:model PostParamsBodyBody
type PostParamsBodyBody struct {

	// kind
	// Enum: [string file base64]
	Kind string `json:"kind,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this post params body body
func (o *PostParamsBodyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postParamsBodyBodyTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","file","base64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postParamsBodyBodyTypeKindPropEnum = append(postParamsBodyBodyTypeKindPropEnum, v)
	}
}

const (

	// PostParamsBodyBodyKindString captures enum value "string"
	PostParamsBodyBodyKindString string = "string"

	// PostParamsBodyBodyKindFile captures enum value "file"
	PostParamsBodyBodyKindFile string = "file"

	// PostParamsBodyBodyKindBase64 captures enum value "base64"
	PostParamsBodyBodyKindBase64 string = "base64"
)

// prop value enum
func (o *PostParamsBodyBody) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postParamsBodyBodyTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostParamsBodyBody) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(o.Kind) { // not required
		return nil
	}

	// value enum
	if err := o.validateKindEnum("body"+"."+"body"+"."+"kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post params body body based on context it is used
func (o *PostParamsBodyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostParamsBodyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostParamsBodyBody) UnmarshalBinary(b []byte) error {
	var res PostParamsBodyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
