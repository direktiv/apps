// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostHandlerFunc turns a function with the right signature into a post handler
type PostHandlerFunc func(PostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostHandlerFunc) Handle(params PostParams) middleware.Responder {
	return fn(params)
}

// PostHandler interface for that can handle valid post params
type PostHandler interface {
	Handle(PostParams) middleware.Responder
}

// NewPost creates a new http.Handler for the post operation
func NewPost(ctx *middleware.Context, handler PostHandler) *Post {
	return &Post{Context: ctx, Handler: handler}
}

/* Post swagger:route POST / post

Post post API

*/
type Post struct {
	Context *middleware.Context
	Handler PostHandler
}

func (o *Post) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostBody post body
//
// swagger:model PostBody
type PostBody struct {

	// List of commands to run with ImageMagick. Image can be provided with `files` in Direktiv.
	// Example: ["convert original.png -resize 100x100!"]
	// Required: true
	Commands []string `json:"commands"`

	// If set to `true` it will return the modified image as base64.
	Return bool `json:"return,omitempty"`

	// store
	Store *PostParamsBodyStore `json:"store,omitempty"`
}

// Validate validates this post body
func (o *PostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBody) validateCommands(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"commands", "body", o.Commands); err != nil {
		return err
	}

	return nil
}

func (o *PostBody) validateStore(formats strfmt.Registry) error {
	if swag.IsZero(o.Store) { // not required
		return nil
	}

	if o.Store != nil {
		if err := o.Store.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "store")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "store")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post body based on the context it is used
func (o *PostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateStore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBody) contextValidateStore(ctx context.Context, formats strfmt.Registry) error {

	if o.Store != nil {
		if err := o.Store.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "store")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "store")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBody) UnmarshalBinary(b []byte) error {
	var res PostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostParamsBodyStore post params body store
// Example: {"name":"myimage.png","scope":"workflow"}
//
// swagger:model PostParamsBodyStore
type PostParamsBodyStore struct {

	// Name of the variable.
	// Required: true
	Name *string `json:"name"`

	// Scope where to save the image.
	// Required: true
	// Enum: [instance workflow namespace]
	Scope *string `json:"scope"`
}

// Validate validates this post params body store
func (o *PostParamsBodyStore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostParamsBodyStore) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"store"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

var postParamsBodyStoreTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["instance","workflow","namespace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postParamsBodyStoreTypeScopePropEnum = append(postParamsBodyStoreTypeScopePropEnum, v)
	}
}

const (

	// PostParamsBodyStoreScopeInstance captures enum value "instance"
	PostParamsBodyStoreScopeInstance string = "instance"

	// PostParamsBodyStoreScopeWorkflow captures enum value "workflow"
	PostParamsBodyStoreScopeWorkflow string = "workflow"

	// PostParamsBodyStoreScopeNamespace captures enum value "namespace"
	PostParamsBodyStoreScopeNamespace string = "namespace"
)

// prop value enum
func (o *PostParamsBodyStore) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postParamsBodyStoreTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostParamsBodyStore) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"store"+"."+"scope", "body", o.Scope); err != nil {
		return err
	}

	// value enum
	if err := o.validateScopeEnum("body"+"."+"store"+"."+"scope", "body", *o.Scope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post params body store based on context it is used
func (o *PostParamsBodyStore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostParamsBodyStore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostParamsBodyStore) UnmarshalBinary(b []byte) error {
	var res PostParamsBodyStore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
